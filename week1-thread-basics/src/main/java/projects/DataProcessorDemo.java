package projects;

import java.util.*;
import java.util.concurrent.*;

/**
 * Data Processor Demo - Minh h·ªça Multi-threading v·ªõi x·ª≠ l√Ω d·ªØ li·ªáu l·ªõn
 * 
 * M·ª•c ƒë√≠ch: So s√°nh performance khi x·ª≠ l√Ω m·∫£ng d·ªØ li·ªáu l·ªõn
 * 
 * B√†i h·ªçc:
 * - Multi-threading hi·ªáu qu·∫£ v·ªõi CPU-intensive operations
 * - C√°ch chia nh·ªè d·ªØ li·ªáu cho nhi·ªÅu thread
 * - Parallel processing patterns
 */
public class DataProcessorDemo {
    
    private static final int DATA_SIZE = 100_000_000; // 100 tri·ªáu ph·∫ßn t·ª≠ (tƒÉng l√™n ƒë·ªÉ th·∫•y r√µ benefit)
    private static final int THREAD_COUNT = 8; // TƒÉng s·ªë threads
    
    public static void main(String[] args) {
        // Auto-run performance comparison if args provided
        if (args.length > 0 && args[0].equals("test")) {
            runPerformanceComparison();
            return;
        }
        
        System.out.println("üìä === DATA PROCESSOR DEMO === üìä\n");
        System.out.println("M·ª•c ƒë√≠ch: So s√°nh x·ª≠ l√Ω d·ªØ li·ªáu l·ªõn gi·ªØa Single-thread v√† Multi-thread");
        System.out.println("Task: T√≠nh t·ªïng b√¨nh ph∆∞∆°ng c·ªßa " + DATA_SIZE + " s·ªë ng·∫´u nhi√™n\n");
        
        try (Scanner scanner = new Scanner(System.in)) {
            while (true) {
            System.out.println("Ch·ªçn ch·∫ø ƒë·ªô:");
            System.out.println("1. Single-threaded Processing");
            System.out.println("2. Multi-threaded Processing");
            System.out.println("3. So s√°nh Performance");
            System.out.println("4. Tho√°t");
            System.out.print("Nh·∫≠p l·ª±a ch·ªçn (1-4): ");
            
            try {
                int choice = scanner.nextInt();
                
                switch (choice) {
                    case 1:
                        runSingleThreaded();
                        break;
                    case 2:
                        runMultiThreaded();
                        break;
                    case 3:
                        runPerformanceComparison();
                        break;
                    case 4:
                        System.out.println("C·∫£m ∆°n b·∫°n! üìä");
                        return;
                    default:
                        System.out.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 1-4.");
                }
                
                System.out.println("\n" + "=".repeat(60) + "\n");
                
            } catch (InputMismatchException e) {
                System.out.println("Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.");
                scanner.nextLine();
            }
        }
        }
    }
    
    /**
     * T·∫°o d·ªØ li·ªáu m·∫´u
     */
    private static double[] generateData(int size) {
        System.out.println("üîÑ ƒêang t·∫°o d·ªØ li·ªáu m·∫´u...");
        double[] data = new double[size];
        Random random = new Random();
        
        for (int i = 0; i < size; i++) {
            data[i] = random.nextDouble() * 1000; // S·ªë t·ª´ 0 ƒë·∫øn 1000
        }
        
        System.out.println("‚úÖ ƒê√£ t·∫°o " + size + " s·ªë ng·∫´u nhi√™n");
        return data;
    }
    
    /**
     * X·ª≠ l√Ω d·ªØ li·ªáu v·ªõi single-thread
     */
    private static void runSingleThreaded() {
        System.out.println("\n--- Single-threaded Processing ---");
        
        double[] data = generateData(DATA_SIZE);
        
        System.out.println("üîÑ ƒêang x·ª≠ l√Ω d·ªØ li·ªáu...");
        long startTime = System.currentTimeMillis();
        
        double sum = 0;
        double max = Double.MIN_VALUE;
        double min = Double.MAX_VALUE;
        
        for (double value : data) {
            double squared = value * value;
            sum += squared;
            max = Math.max(max, squared);
            min = Math.min(min, squared);
        }
        
        long endTime = System.currentTimeMillis();
        
        System.out.println("‚úÖ Ho√†n th√†nh!");
        System.out.println("üìä K·∫øt qu·∫£:");
        System.out.println("   - T·ªïng b√¨nh ph∆∞∆°ng: " + String.format("%.2f", sum));
        System.out.println("   - Gi√° tr·ªã l·ªõn nh·∫•t: " + String.format("%.2f", max));
        System.out.println("   - Gi√° tr·ªã nh·ªè nh·∫•t: " + String.format("%.2f", min));
        System.out.println("   - Th·ªùi gian: " + (endTime - startTime) + " ms");
    }
    
    /**
     * X·ª≠ l√Ω d·ªØ li·ªáu v·ªõi multi-thread
     */
    private static void runMultiThreaded() {
        System.out.println("\n--- Multi-threaded Processing ---");
        
        double[] data = generateData(DATA_SIZE);
        
        System.out.println("üîÑ ƒêang x·ª≠ l√Ω d·ªØ li·ªáu v·ªõi " + THREAD_COUNT + " threads...");
        long startTime = System.currentTimeMillis();
        
        ExecutorService executor = Executors.newFixedThreadPool(THREAD_COUNT);
        List<Future<ProcessingResult>> futures = new ArrayList<>();
        
        // Chia d·ªØ li·ªáu cho c√°c thread
        int chunkSize = DATA_SIZE / THREAD_COUNT;
        
        for (int i = 0; i < THREAD_COUNT; i++) {
            // S·ª≠a l·ªói: Copy bi·∫øn v√†o final ƒë·ªÉ tr√°nh closure capture sai
            final int chunkIndex = i;
            final int start = chunkIndex * chunkSize;
            final int end = (chunkIndex == THREAD_COUNT - 1) ? DATA_SIZE : start + chunkSize;
            
            Future<ProcessingResult> future = executor.submit(() -> {
                double sum = 0;
                double max = Double.MIN_VALUE;
                double min = Double.MAX_VALUE;
                
                for (int j = start; j < end; j++) {
                    double squared = data[j] * data[j];
                    sum += squared;
                    max = Math.max(max, squared);
                    min = Math.min(min, squared);
                }
                
                return new ProcessingResult(sum, max, min);
            });
            
            futures.add(future);
        }
        
        // Thu th·∫≠p k·∫øt qu·∫£
        double totalSum = 0;
        double globalMax = Double.MIN_VALUE;
        double globalMin = Double.MAX_VALUE;
        
        try {
            for (Future<ProcessingResult> future : futures) {
                ProcessingResult result = future.get();
                totalSum += result.sum;
                globalMax = Math.max(globalMax, result.max);
                globalMin = Math.min(globalMin, result.min);
            }
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
        }
        
        long endTime = System.currentTimeMillis();
        
        System.out.println("‚úÖ Ho√†n th√†nh!");
        System.out.println("üìä K·∫øt qu·∫£:");
        System.out.println("   - T·ªïng b√¨nh ph∆∞∆°ng: " + String.format("%.2f", totalSum));
        System.out.println("   - Gi√° tr·ªã l·ªõn nh·∫•t: " + String.format("%.2f", globalMax));
        System.out.println("   - Gi√° tr·ªã nh·ªè nh·∫•t: " + String.format("%.2f", globalMin));
        System.out.println("   - Th·ªùi gian: " + (endTime - startTime) + " ms");
    }
    
    /**
     * So s√°nh performance
     */
    private static void runPerformanceComparison() {
        System.out.println("\n--- Performance Comparison ---");
        System.out.println("ƒêang ch·∫°y c·∫£ hai ph∆∞∆°ng ph√°p ƒë·ªÉ so s√°nh...\n");
        
        // Hi·ªÉn th·ªã th√¥ng tin CPU
        int cpuCores = Runtime.getRuntime().availableProcessors();
        System.out.println("üñ•Ô∏è  CPU Info:");
        System.out.println("   - Available cores: " + cpuCores);
        System.out.println("   - Threads used: " + THREAD_COUNT);
        System.out.println();
        
        double[] data = generateData(DATA_SIZE);
        
        // Single-threaded
        System.out.println("üîÑ Ch·∫°y Single-threaded...");
        long singleStart = System.currentTimeMillis();
        double singleSum = processDataSingleThread(data);
        long singleTime = System.currentTimeMillis() - singleStart;
        
        // Multi-threaded
        System.out.println("üîÑ Ch·∫°y Multi-threaded...");
        long multiStart = System.currentTimeMillis();
        double multiSum = processDataMultiThread(data);
        long multiTime = System.currentTimeMillis() - multiStart;
        
        // K·∫øt qu·∫£
        System.out.println("\nüìä === K·∫æT QU·∫¢ SO S√ÅNH ===");
        System.out.println("Single-threaded:");
        System.out.println("   - Th·ªùi gian: " + singleTime + " ms");
        System.out.println("   - T·ªïng: " + String.format("%.2f", singleSum));
        
        System.out.println("Multi-threaded (" + THREAD_COUNT + " threads):");
        System.out.println("   - Th·ªùi gian: " + multiTime + " ms");
        System.out.println("   - T·ªïng: " + String.format("%.2f", multiSum));
        
        double speedup = (double) singleTime / multiTime;
        System.out.println("\nüöÄ Speedup: " + String.format("%.2f", speedup) + "x");
        
        if (speedup > 1) {
            System.out.println("‚úÖ Multi-threading nhanh h∆°n " + String.format("%.1f", speedup) + " l·∫ßn!");
        } else {
            System.out.println("‚ùå Single-threading nhanh h∆°n. C√≥ th·ªÉ do overhead c·ªßa threads.");
        }
        
        // Ki·ªÉm tra k·∫øt qu·∫£ v·ªõi th√¥ng tin chi ti·∫øt
        double difference = Math.abs(singleSum - multiSum);
        double relativeError = (difference / Math.abs(singleSum)) * 100;
        
        System.out.println("\nüîç === PH√ÇN T√çCH SAI S·ªê ===");
        System.out.println("Sai s·ªë tuy·ªát ƒë·ªëi: " + String.format("%.10f", difference));
        System.out.println("Sai s·ªë t∆∞∆°ng ƒë·ªëi: " + String.format("%.10f%%", relativeError));
        
        if (difference < 1.0) {
            System.out.println("‚úÖ K·∫øt qu·∫£ gi·ªëng nhau - thu·∫≠t to√°n ch√≠nh x√°c!");
            System.out.println("   (Sai s·ªë nh·ªè l√† do floating point precision khi c·ªông theo th·ª© t·ª± kh√°c nhau)");
        } else if (relativeError < 0.00001) { // Less than 0.00001% error
            System.out.println("‚ö†Ô∏è Sai s·ªë r·∫•t nh·ªè - c√≥ th·ªÉ do floating point precision");
        } else {
            System.out.println("‚ùå K·∫øt qu·∫£ kh√°c nhau ƒë√°ng k·ªÉ - c√≥ l·ªói trong thu·∫≠t to√°n!");
        }
    }
    
    private static double processDataSingleThread(double[] data) {
        double sum = 0;
        for (double value : data) {
            sum += value * value;
        }
        return sum;
    }
    
    private static double processDataMultiThread(double[] data) {
        ExecutorService executor = Executors.newFixedThreadPool(THREAD_COUNT);
        List<Future<Double>> futures = new ArrayList<>();
        
        int chunkSize = data.length / THREAD_COUNT;
        
        for (int i = 0; i < THREAD_COUNT; i++) {
            // S·ª≠a l·ªói: Copy bi·∫øn v√†o final ƒë·ªÉ tr√°nh closure capture sai
            final int chunkIndex = i;
            final int start = chunkIndex * chunkSize;
            final int end = (chunkIndex == THREAD_COUNT - 1) ? data.length : start + chunkSize;
            
            Future<Double> future = executor.submit(() -> {
                double sum = 0;
                for (int j = start; j < end; j++) {
                    sum += data[j] * data[j];
                }
                return sum;
            });
            
            futures.add(future);
        }
        
        double totalSum = 0;
        try {
            for (Future<Double> future : futures) {
                totalSum += future.get();
            }
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
        }
        
        return totalSum;
    }
    
    /**
     * Class ƒë·ªÉ l∆∞u k·∫øt qu·∫£ x·ª≠ l√Ω c·ªßa m·ªói thread
     */
    private static class ProcessingResult {
        final double sum;
        final double max;
        final double min;
        
        ProcessingResult(double sum, double max, double min) {
            this.sum = sum;
            this.max = max;
            this.min = min;
        }
    }
}
