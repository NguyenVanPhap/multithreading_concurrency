package projects;

import java.util.*;
import java.util.concurrent.*;

/**
 * Prime Calculator Demo - Minh h·ªça Multi-threading hi·ªáu qu·∫£
 * 
 * M·ª•c ƒë√≠ch: So s√°nh performance gi·ªØa single-thread v√† multi-thread
 * khi x·ª≠ l√Ω CPU-intensive tasks (t√≠nh to√°n s·ªë nguy√™n t·ªë)
 * 
 * B√†i h·ªçc:
 * - Multi-threading hi·ªáu qu·∫£ v·ªõi CPU-intensive tasks
 * - C√°ch chia nh·ªè c√¥ng vi·ªác cho nhi·ªÅu thread
 * - ƒêo l∆∞·ªùng performance th·ª±c t·∫ø
 */
public class PrimeCalculatorDemo {
    
    private static final int MAX_NUMBER = 1000000; // T√≠nh s·ªë nguy√™n t·ªë t·ª´ 2 ƒë·∫øn 1,000,000
    private static final int THREAD_COUNT = 4; // S·ªë thread ƒë·ªÉ s·ª≠ d·ª•ng
    
    public static void main(String[] args) {
        System.out.println("üî¢ === PRIME CALCULATOR DEMO === üî¢\n");
        System.out.println("M·ª•c ƒë√≠ch: So s√°nh performance gi·ªØa Single-thread v√† Multi-thread");
        System.out.println("Task: T√¨m t·∫•t c·∫£ s·ªë nguy√™n t·ªë t·ª´ 2 ƒë·∫øn " + MAX_NUMBER + "\n");
        
        try (Scanner scanner = new Scanner(System.in)) {
            while (true) {
            System.out.println("Ch·ªçn ch·∫ø ƒë·ªô:");
            System.out.println("1. Single-threaded (tu·∫ßn t·ª±)");
            System.out.println("2. Multi-threaded (song song)");
            System.out.println("3. So s√°nh Performance");
            System.out.println("4. Tho√°t");
            System.out.print("Nh·∫≠p l·ª±a ch·ªçn (1-4): ");
            
            try {
                int choice = scanner.nextInt();
                
                switch (choice) {
                    case 1:
                        runSingleThreaded();
                        break;
                    case 2:
                        runMultiThreaded();
                        break;
                    case 3:
                        runPerformanceComparison();
                        break;
                    case 4:
                        System.out.println("C·∫£m ∆°n b·∫°n! üî¢");
                        return;
                    default:
                        System.out.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 1-4.");
                }
                
                System.out.println("\n" + "=".repeat(60) + "\n");
                
            } catch (InputMismatchException e) {
                System.out.println("Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.");
                scanner.nextLine(); // Clear invalid input
            }
        }
        }
    }
    
    /**
     * Ch·∫°y t√≠nh to√°n s·ªë nguy√™n t·ªë v·ªõi single-thread
     */
    private static void runSingleThreaded() {
        System.out.println("\n--- Single-threaded Calculation ---");
        System.out.println("ƒêang t√≠nh to√°n s·ªë nguy√™n t·ªë t·ª´ 2 ƒë·∫øn " + MAX_NUMBER + "...");
        
        long startTime = System.currentTimeMillis();
        List<Integer> primes = findPrimesSingleThread(2, MAX_NUMBER);
        long endTime = System.currentTimeMillis();
        
        System.out.println("‚úÖ Ho√†n th√†nh!");
        System.out.println("üìä K·∫øt qu·∫£:");
        System.out.println("   - T√¨m th·∫•y " + primes.size() + " s·ªë nguy√™n t·ªë");
        System.out.println("   - Th·ªùi gian: " + (endTime - startTime) + " ms");
        System.out.println("   - 10 s·ªë nguy√™n t·ªë ƒë·∫ßu ti√™n: " + primes.subList(0, Math.min(10, primes.size())));
    }
    
    /**
     * Ch·∫°y t√≠nh to√°n s·ªë nguy√™n t·ªë v·ªõi multi-thread
     */
    private static void runMultiThreaded() {
        System.out.println("\n--- Multi-threaded Calculation ---");
        System.out.println("ƒêang t√≠nh to√°n s·ªë nguy√™n t·ªë t·ª´ 2 ƒë·∫øn " + MAX_NUMBER + " v·ªõi " + THREAD_COUNT + " threads...");
        
        long startTime = System.currentTimeMillis();
        List<Integer> primes = findPrimesMultiThread(2, MAX_NUMBER, THREAD_COUNT);
        long endTime = System.currentTimeMillis();
        
        System.out.println("‚úÖ Ho√†n th√†nh!");
        System.out.println("üìä K·∫øt qu·∫£:");
        System.out.println("   - T√¨m th·∫•y " + primes.size() + " s·ªë nguy√™n t·ªë");
        System.out.println("   - Th·ªùi gian: " + (endTime - startTime) + " ms");
        System.out.println("   - 10 s·ªë nguy√™n t·ªë ƒë·∫ßu ti√™n: " + primes.subList(0, Math.min(10, primes.size())));
    }
    
    /**
     * So s√°nh performance gi·ªØa single-thread v√† multi-thread
     */
    private static void runPerformanceComparison() {
        System.out.println("\n--- Performance Comparison ---");
        System.out.println("ƒêang ch·∫°y c·∫£ hai ph∆∞∆°ng ph√°p ƒë·ªÉ so s√°nh...\n");
        
        // Single-threaded
        System.out.println("üîÑ Ch·∫°y Single-threaded...");
        long singleStart = System.currentTimeMillis();
        List<Integer> singlePrimes = findPrimesSingleThread(2, MAX_NUMBER);
        long singleTime = System.currentTimeMillis() - singleStart;
        
        // Multi-threaded
        System.out.println("üîÑ Ch·∫°y Multi-threaded...");
        long multiStart = System.currentTimeMillis();
        List<Integer> multiPrimes = findPrimesMultiThread(2, MAX_NUMBER, THREAD_COUNT);
        long multiTime = System.currentTimeMillis() - multiStart;
        
        // K·∫øt qu·∫£
        System.out.println("\nüìä === K·∫æT QU·∫¢ SO S√ÅNH ===");
        System.out.println("Single-threaded:");
        System.out.println("   - Th·ªùi gian: " + singleTime + " ms");
        System.out.println("   - S·ªë nguy√™n t·ªë: " + singlePrimes.size());
        
        System.out.println("Multi-threaded (" + THREAD_COUNT + " threads):");
        System.out.println("   - Th·ªùi gian: " + multiTime + " ms");
        System.out.println("   - S·ªë nguy√™n t·ªë: " + multiPrimes.size());
        
        double speedup = (double) singleTime / multiTime;
        System.out.println("\nüöÄ Speedup: " + String.format("%.2f", speedup) + "x");
        
        if (speedup > 1) {
            System.out.println("‚úÖ Multi-threading nhanh h∆°n " + String.format("%.1f", speedup) + " l·∫ßn!");
        } else {
            System.out.println("‚ùå Single-threading nhanh h∆°n. C√≥ th·ªÉ do overhead c·ªßa threads.");
        }
        
        // Ki·ªÉm tra k·∫øt qu·∫£ c√≥ gi·ªëng nhau kh√¥ng
        if (singlePrimes.size() == multiPrimes.size()) {
            System.out.println("‚úÖ K·∫øt qu·∫£ gi·ªëng nhau - thu·∫≠t to√°n ch√≠nh x√°c!");
        } else {
            System.out.println("‚ùå K·∫øt qu·∫£ kh√°c nhau - c√≥ l·ªói trong thu·∫≠t to√°n!");
        }
    }
    
    /**
     * T√¨m s·ªë nguy√™n t·ªë v·ªõi single-thread
     */
    private static List<Integer> findPrimesSingleThread(int start, int end) {
        List<Integer> primes = new ArrayList<>();
        
        for (int i = start; i <= end; i++) {
            if (isPrime(i)) {
                primes.add(i);
            }
        }
        
        return primes;
    }
    
    /**
     * T√¨m s·ªë nguy√™n t·ªë v·ªõi multi-thread
     */
    private static List<Integer> findPrimesMultiThread(int start, int end, int threadCount) {
        ExecutorService executor = Executors.newFixedThreadPool(threadCount);
        List<Future<List<Integer>>> futures = new ArrayList<>();
        
        // Chia c√¥ng vi·ªác cho c√°c thread
        int rangeSize = (end - start + 1) / threadCount;
        
        for (int i = 0; i < threadCount; i++) {
            int threadStart = start + i * rangeSize;
            int threadEnd = (i == threadCount - 1) ? end : threadStart + rangeSize - 1;
            
            Future<List<Integer>> future = executor.submit(() -> {
                List<Integer> threadPrimes = new ArrayList<>();
                for (int j = threadStart; j <= threadEnd; j++) {
                    if (isPrime(j)) {
                        threadPrimes.add(j);
                    }
                }
                return threadPrimes;
            });
            
            futures.add(future);
        }
        
        // Thu th·∫≠p k·∫øt qu·∫£
        List<Integer> allPrimes = new ArrayList<>();
        try {
            for (Future<List<Integer>> future : futures) {
                allPrimes.addAll(future.get());
            }
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
        }
        
        // S·∫Øp x·∫øp k·∫øt qu·∫£
        Collections.sort(allPrimes);
        return allPrimes;
    }
    
    /**
     * Ki·ªÉm tra m·ªôt s·ªë c√≥ ph·∫£i l√† s·ªë nguy√™n t·ªë kh√¥ng
     * ƒê√¢y l√† thu·∫≠t to√°n ƒë∆°n gi·∫£n nh∆∞ng CPU-intensive
     */
    private static boolean isPrime(int n) {
        if (n < 2) return false;
        if (n == 2) return true;
        if (n % 2 == 0) return false;
        
        // Ki·ªÉm tra t·ª´ 3 ƒë·∫øn sqrt(n)
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}
